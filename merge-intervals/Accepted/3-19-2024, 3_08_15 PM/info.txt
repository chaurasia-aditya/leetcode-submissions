{"id":1208475976,"question_id":56,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1710875295,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1208475976/","is_pending":"Not Pending","title":"Merge Intervals","memory":"46 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        if(intervals.length == 0)\n            return intervals;\n\n        Arrays.sort(intervals, new Comparator<int[]>(){\n            public int compare(int[] a, int[] b){\n                return a[0]-b[0];\n            }\n        });\n\n        List<int[]> l = new ArrayList<>();\n        l.add(intervals[0]);\n\n        for(int i=1;i<intervals.length;i++){\n            int[] cur = intervals[i];\n            int[] last = l.get(l.size() - 1);\n            if (cur[0] > last[1]) {\n                l.add(cur);\n            } else if (cur[1] > last[1]) {\n                last[1] = cur[1];\n            }\n        }\n\n        int[][] res = new int[l.size()][2];\n        res = l.toArray(res);\n\n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}