{"id":1016727708,"question_id":56,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1691596776,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1016727708/","is_pending":"Not Pending","title":"Merge Intervals","memory":"46.5 MB","code":"class Solution {\n    void mergearr(int arr[][], int l, int m, int r)\n    {\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        int L[][] = new int[n1][2];\n        int R[][] = new int[n2][2];\n\n        for (int i = 0; i < n1; ++i)\n            L[i] = arr[l + i];\n        for (int j = 0; j < n2; ++j)\n            R[j] = arr[m + 1 + j];\n\n        int i = 0, j = 0;\n        int k = l;\n        while (i < n1 && j < n2) {\n            if (L[i][0] < R[j][0]) {\n                arr[k] = L[i];\n                i++;\n            }\n            else if(L[i][0] == R[j][0] && L[i][1]<R[j][1]){\n                arr[k] = L[i];\n                i++;\n            }\n            else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n    void sort(int arr[][], int l, int r)\n    {\n        if (l < r) {\n            int m = l + (r - l) / 2;\n            sort(arr, l, m);\n            sort(arr, m + 1, r);\n            mergearr(arr, l, m, r);\n        }\n    }\n    public int[][] merge(int[][] intervals) {\n        int r = intervals.length;\n        sort(intervals, 0, r-1);\n\n        // int[][] res=new int[r][2];\n        List<List<Integer>> ans = new ArrayList<>();\n\n        int cur_min = intervals[0][0], cur_max = intervals[0][1];\n        int index = 0;\n        for(int i=1;i<r;i++){\n            if(cur_max>=intervals[i][0]/* && cur_max<=intervals[i][1]*/){\n                cur_max = Math.max(cur_max, intervals[i][1]);\n            }else{\n                ans.add(Arrays.asList(cur_min, cur_max));\n                // res[index][0] = cur_min;\n                // res[index][1] = cur_max;\n                // index++;\n                cur_min = intervals[i][0];\n                cur_max = intervals[i][1];\n            }\n        }\n        ans.add(Arrays.asList(cur_min, cur_max));\n        // res[index][0] = cur_min;\n        // res[index][1] = cur_max;\n        int[][] res = ans.stream().map(  u  ->  u.stream().mapToInt(i->i).toArray()  ).toArray(int[][]::new);\n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}