{"id":1292172274,"question_id":853,"lang":"java","lang_name":"Java","time":"1Â week","timestamp":1718697880,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1292172274/","is_pending":"Not Pending","title":"Most Profit Assigning Work","memory":"45.7 MB","code":"class Solution {\n    class Job implements Comparable<Job>{\n        int diff, prof;\n\n        public Job(int d, int p){\n            diff = d;\n            prof = p;\n        }\n\n        public int compareTo(Job b){\n            if(this.diff == b.diff){\n                return this.prof-b.prof;\n            }\n            return this.diff-b.diff;\n        }\n    }\n    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n        int n = profit.length;\n        int m = worker.length;\n\n        Job[] jobs = new Job[n];\n        for(int i=0;i<n;i++){\n            jobs[i] = new Job(difficulty[i], profit[i]);\n        }\n\n        Arrays.sort(jobs);\n        Arrays.sort(worker);\n\n        int i=0, j = 0;\n        int res = 0;\n        int curMax = jobs[0].prof;\n\n        while(i<m && worker[i]<jobs[0].diff)\n            i++;\n        for(;i<m;i++){\n            while(j<n && jobs[j].diff<=worker[i]){\n                curMax = Math.max(curMax, jobs[j].prof);\n                j++;\n            }\n            if(j<=n && worker[i]>=jobs[j-1].diff){\n                res+=curMax;\n            }else{\n                break;\n            }\n        }\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"most-profit-assigning-work","has_notes":false,"flag_type":1}