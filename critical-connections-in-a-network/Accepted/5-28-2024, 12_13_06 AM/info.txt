{"id":1270024828,"question_id":1300,"lang":"java","lang_name":"Java","time":"4Â weeks","timestamp":1716869586,"status":10,"status_display":"Accepted","runtime":"74 ms","url":"/submissions/detail/1270024828/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"122 MB","code":"class Solution {\n    int time = 0;\n    void dfs(int i, int parent, List<Integer>[] graph, boolean[] visited, int[] disc, int[] low, List<List<Integer>> bridges){\n        visited[i] = true;\n        disc[i] = time;\n        low[i] = time++;\n        \n        for(int neighbour:graph[i]){\n            if(neighbour == parent)\n                continue;\n            if(!visited[neighbour]){\n                dfs(neighbour, i, graph, visited, disc, low, bridges);\n                \n                low[i] = Math.min(low[i], low[neighbour]);\n                if(disc[i]<low[neighbour])\n                    bridges.add(Arrays.asList(i, neighbour));\n            } else{\n                low[i] = Math.min(low[i], disc[neighbour]);\n            }\n        }\n    }\n    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {\n        List<Integer>[] graph = new List[n];\n        \n        List<List<Integer>> bridges = new ArrayList<>();\n        \n        for(int i=0;i<n;i++)\n            graph[i] = new ArrayList<>();\n        \n        for(List<Integer> x:connections){\n            graph[x.get(0)].add(x.get(1));\n            graph[x.get(1)].add(x.get(0));\n        }\n        \n        int[] disc = new int[n];\n        int[] low = new int[n];\n        boolean[] visited = new boolean[n];\n        \n        dfs(0, -1, graph, visited, disc, low, bridges);\n        \n        return bridges;\n    }\n}","compare_result":"11111111111111111","title_slug":"critical-connections-in-a-network","has_notes":false,"flag_type":1}