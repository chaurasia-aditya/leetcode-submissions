{"id":953125922,"question_id":108,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1684471765,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/953125922/","is_pending":"Not Pending","title":"Convert Sorted Array to Binary Search Tree","memory":"43.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode createTreeIterative(int[] nums){\n        if (nums.length == 0) {\n            return null;\n        }\n \n        int n = nums.length;\n        int mid = n / 2;\n\n        TreeNode root = new TreeNode(nums[mid]);\n\n        LinkedList<Object[]> q = new LinkedList<>();\n\n        q.add(new Object[] { root,\n                             new int[] { 0, mid - 1 } });\n        q.add(new Object[] {\n            root, new int[] { mid + 1, n - 1 } });\n \n        while (!q.isEmpty()) {\n            Object[] curr = q.poll();\n\n            TreeNode parent = (TreeNode)curr[0];\n\n            int[] indices = (int[])curr[1];\n            int left = indices[0];\n            int right = indices[1];\n\n            if (left <= right && parent != null) {\n                mid = (left + right) / 2;\n                TreeNode child = new TreeNode(nums[mid]);\n\n                if (nums[mid] < parent.val) {\n                    parent.left = child;\n                }\n                else {\n                    parent.right = child;\n                }\n\n                q.add(new Object[] {\n                    child, new int[] { left, mid - 1 } });\n                q.add(new Object[] {\n                    child, new int[] { mid + 1, right } });\n            }\n        }\n \n        return root;\n    }\n    public TreeNode createTree(int[] nums, int low, int high){\n        if(low>high)\n            return null;\n    \n        int mid = low+(high-low)/2;\n        TreeNode cur = new TreeNode(nums[mid]);\n        cur.left = createTree(nums, low, mid-1);\n        cur.right = createTree(nums, mid+1, high);\n\n        return cur;\n    }\n    public TreeNode sortedArrayToBST(int[] nums) {\n        //return createTree(nums,0, nums.length-1);\n        return createTreeIterative(nums);\n    }\n}","compare_result":"1111111111111111111111111111111","title_slug":"convert-sorted-array-to-binary-search-tree","has_notes":false,"flag_type":1}