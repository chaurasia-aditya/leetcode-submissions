{"id":1272800338,"question_id":494,"lang":"java","lang_name":"Java","time":"3 weeks, 5 days","timestamp":1717112312,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1272800338/","is_pending":"Not Pending","title":"Target Sum","memory":"45.2 MB","code":"class Solution {\n    int count(int pos, int n, int target, int[] nums, int cur, int[][] memo){\n        if(pos == n)\n            if(cur==target)\n                return 1;\n            else\n                return 0;\n        if(cur>target)\n            return 0;\n\n        if(memo[pos][cur]!=-1)\n            return memo[pos][cur];\n        \n        return memo[pos][cur] = count(pos+1, n, target, nums, cur+nums[pos], memo) + count(pos+1, n, target, nums, cur, memo);\n    }\n\n    public int findTargetSumWays(int[] nums, int target) {\n        int n = nums.length;\n        int total = 0;\n        int[][] memo = new int[n][1001];\n\n        for(int i = 0; i<n; i++){\n            total+=nums[i];\n            Arrays.fill(memo[i], -1);\n        }\n        \n        if(total<target || (total-target)%2 == 1)\n            return 0;\n        \n        int reduce = (total-target)/2;\n\n        return count(0, n, reduce, nums, 0, memo);\n\n\n        // int count[] = new int[reduce+1];\n        // count[0] = 1;\n\n        // for (int i = 1; i <= reduce; i++)\n        //     for (int j = 0; j < arr.length; j++)\n     \n        //         // if i >= arr[j] then\n        //         // accumulate count for value 'i' as\n        //         // ways to form value 'i-arr[j]'\n        //         if (i >= arr[j])\n        //             count[i] += count[i - arr[j]];\n         \n        // // required number of ways \n        // return count[N]; \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum","has_notes":false,"flag_type":1}