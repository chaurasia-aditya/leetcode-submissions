{"id":1139246262,"question_id":211,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1704606645,"status":10,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/1139246262/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"93.3 MB","code":"class Node{\n    Node children[];\n    boolean isEnd;\n    public Node(){\n        children = new Node[26];\n        isEnd = false;\n    }\n}\nclass WordDictionary {\n    Node root;\n    public WordDictionary() {\n        root = new Node();\n    }\n    \n    public void addWord(String word) {\n        if(root == null)\n            return;\n        Node cur = root;\n        for(char ch: word.toCharArray()){\n            if(cur.children[ch-'a'] == null){\n                cur.children[ch-'a'] = new Node();\n            }\n            cur = cur.children[ch-'a'];\n        }\n        cur.isEnd = true;\n    }\n    \n    private boolean searchLoop(Node cur, int i, String word){\n        for (;i<word.length();i++) {\n            char c = word.charAt(i);\n\n            if(c == '.'){\n                for(int j=0;j<26;j++){\n                    if(cur.children[j]!=null){\n                        boolean res = searchLoop(cur.children[j],i+1, word);\n                        if(res == true){\n                            return res;\n                        }\n                    }\n                }\n                return false;\n            }\n\n            int index = c-'a';\n            if (cur.children[index] == null) {\n                return false;\n            }\n            cur = cur.children[index];\n        }\n        return cur.isEnd;\n    }\n\n    public boolean search(String word) {\n        return searchLoop(root, 0, word);\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}