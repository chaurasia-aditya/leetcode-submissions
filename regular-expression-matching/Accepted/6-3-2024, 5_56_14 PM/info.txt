{"id":1276816440,"question_id":10,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1717451774,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1276816440/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"43.3 MB","code":"class Solution {\n    Map<String, Boolean> memo = new HashMap<>();\n    boolean backtrack(int pos_s, int pos_p, int n, int m, String s, String p){\n\n        String cur = pos_s+\",\"+pos_p;\n\n        if (memo.containsKey(cur)) {\n            return memo.get(cur);\n        }\n\n        if(pos_s == n && pos_p == m){\n            memo.put(cur, true);\n            return true;\n        }\n        \n        if(pos_p == m){\n            memo.put(cur, false);\n            return false;\n        }\n\n        char c = p.charAt(pos_p);\n\n        boolean hasStar = false;\n        if(pos_p<m-1 && p.charAt(pos_p+1) == '*')\n            hasStar = true;\n        \n        boolean result = false;\n\n        if(hasStar){\n            if(backtrack(pos_s, pos_p+2, n, m, s, p))\n                return true;\n\n            for(int i=0;pos_s+i<n;i++){\n                if(c == '.'|| s.charAt(pos_s+i)==c){\n                    if(backtrack(pos_s+i+1, pos_p, n, m, s, p))\n                        result = true;\n                        break;\n                }else{\n                    break;\n                }\n            }\n        }else{\n            if(pos_s<n && (c == '.' || c == s.charAt(pos_s))){\n                return backtrack(pos_s+1, pos_p+1, n, m, s, p);\n            }\n        }\n\n        memo.put(cur, result);\n        return result;\n\n    }\n    public boolean isMatch(String s, String p) {\n        int n = s.length();\n        int m = p.length();\n        return backtrack(0, 0, n, m, s, p);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching","has_notes":false,"flag_type":1}