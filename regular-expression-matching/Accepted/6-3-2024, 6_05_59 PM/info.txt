{"id":1276820946,"question_id":10,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1717452359,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1276820946/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"42.2 MB","code":"class Solution {\n    Boolean[][] memo;\n    boolean backtrack(int pos_s, int pos_p, int n, int m, String s, String p){\n        if (memo[pos_s][pos_p]!=null) {\n            return memo[pos_s][pos_p];\n        }\n\n        if(pos_s == n && pos_p == m){\n            memo[pos_s][pos_p] = true;\n            return true;\n        }\n        \n        if(pos_p == m){\n            memo[pos_s][pos_p] = false;\n            return false;\n        }\n\n        char c = p.charAt(pos_p);\n\n        boolean hasStar = false;\n        if(pos_p<m-1 && p.charAt(pos_p+1) == '*')\n            hasStar = true;\n        \n        boolean result = false;\n\n        if(hasStar){\n            if(backtrack(pos_s, pos_p+2, n, m, s, p))\n                return true;\n\n            for(int i=0;pos_s+i<n;i++){\n                if(c == '.'|| s.charAt(pos_s+i)==c){\n                    if(backtrack(pos_s+i+1, pos_p, n, m, s, p))\n                        result = true;\n                        break;\n                }else{\n                    break;\n                }\n            }\n        }else{\n            if(pos_s<n && (c == '.' || c == s.charAt(pos_s))){\n                return backtrack(pos_s+1, pos_p+1, n, m, s, p);\n            }\n        }\n\n        memo[pos_s][pos_p] = result;\n        return result;\n\n    }\n    public boolean isMatch(String s, String p) {\n        int n = s.length();\n        int m = p.length();\n        memo = new Boolean[n+1][m+1];\n        return backtrack(0, 0, n, m, s, p);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching","has_notes":false,"flag_type":1}