{"id":1297522633,"question_id":1549,"lang":"java","lang_name":"Java","time":"2 days, 18 hours","timestamp":1719127818,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1297522633/","is_pending":"Not Pending","title":"Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit","memory":"58.2 MB","code":"class Solution {\n    public int longestSubarray(int[] nums, int limit) {\n        List<Integer> increase = new LinkedList<>();\n        List<Integer> decrease = new LinkedList<>();\n\n        int max = 0;\n        int left = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            int n = nums[i];\n\n            while (increase.size() > 0 && n < increase.getLast()) {\n                increase.removeLast();\n            }\n            increase.add(n);\n\n            while (decrease.size() > 0 && n > decrease.getLast()) {\n                decrease.removeLast();\n            }\n\n            decrease.add(n);\n\n            while (decrease.getFirst() - increase.getFirst() > limit) {\n                if (nums[left] == decrease.getFirst()) {\n                    decrease.removeFirst();\n                }\n                if (nums[left] == increase.getFirst()) {\n                    increase.removeFirst();\n                }\n                left++;\n            }\n\n            int size = i - left + 1;\n            max = Math.max(max, size);\n        }\n\n        return max;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit","has_notes":false,"flag_type":1}