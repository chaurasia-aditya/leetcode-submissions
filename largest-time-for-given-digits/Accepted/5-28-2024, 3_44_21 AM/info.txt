{"id":1270191866,"question_id":986,"lang":"java","lang_name":"Java","time":"4Â weeks","timestamp":1716882261,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1270191866/","is_pending":"Not Pending","title":"Largest Time for Given Digits","memory":"41.4 MB","code":"class Solution {\n    public String largestTimeFromDigits(int[] arr) {       \n        StringBuilder sb = new StringBuilder();\n        \n        int hh = -1;\n        int mm = -1;\n        int h_i=-1, h_j=-1, m_k=-1, m_l=-1;\n        \n        for(int i=0;i<4;i++){\n            for(int j=0;j<4;j++){\n                if(i == j)\n                    continue;\n                \n                int val = arr[i]*10+arr[j];\n                if(val<24){\n                    for(int k=0;k<4;k++){\n                        if(k==i || k==j){\n                            continue;\n                        }\n                        for(int l = 0;l<4;l++){\n                            if(l==i || l==j || l==k)\n                                continue;\n                            \n                            int val2 = arr[k]*10+arr[l];\n                            if(val2<60 && ((val>hh) || (val==hh && val2>mm))){\n                                hh = val;\n                                mm = val2;\n                                h_i = i;\n                                h_j = j;\n                                m_k = k;\n                                m_l = l;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        if(hh == -1 || mm == -1)\n            return \"\";\n        \n        sb.append(arr[h_i]);\n        sb.append(arr[h_j]);\n        sb.append(\":\");\n        sb.append(arr[m_k]);\n        sb.append(arr[m_l]);\n        \n        return sb.toString();\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-time-for-given-digits","has_notes":false,"flag_type":1}