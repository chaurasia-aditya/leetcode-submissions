{"id":1210360967,"question_id":40,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1711055263,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1210360967/","is_pending":"Not Pending","title":"Combination Sum II","memory":"43.4 MB","code":"class Solution {\n    public void dfs(int left, int i, int[] candidates, int n, List<Integer> cur, List<List<Integer>> res){\n        if(left == 0){\n            res.add(new ArrayList<>(cur));\n            return;\n        }\n\n        if(left<0 || i == n || candidates[i]>left){\n            return;\n        }\n\n        for(int j=i;j<n;j++){\n            if(candidates[i]>left)\n                break;\n            if(j>i && candidates[j] == candidates[j-1])\n                continue;\n\n            cur.add(candidates[j]);\n            dfs(left-candidates[j], j+1, candidates, n, cur, res);\n            cur.remove(cur.size()-1);\n        }\n\n    }\n\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        List<List<Integer>> res =  new ArrayList<>();\n        Arrays.sort(candidates);\n        int n = candidates.length;\n\n        dfs(target, 0, candidates, n, new ArrayList<>(), res);\n\n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}