{"id":1260015849,"question_id":669,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1715896619,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1260015849/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"43.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    TreeNode postOrderFix(TreeNode root, int low, int high){\n        if(root == null)\n        {\n            return null;\n        }\n\n        root.left = postOrderFix(root.left, low, high);\n        root.right = postOrderFix(root.right, low, high);\n\n        if(root.val < low) \n        {\n            TreeNode right = root.right;\n            root = null;\n            return right;\n        }\n\n        if(root.val > high) \n        {\n            TreeNode left = root.left;\n            root = null;\n            return left;\n        }\n        \n        return root;\n    }\n    public TreeNode trimBST(TreeNode root, int low, int high) {\n        if(root  == null)\n            return null;\n        \n        return postOrderFix(root, low, high);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trim-a-binary-search-tree","has_notes":false,"flag_type":1}