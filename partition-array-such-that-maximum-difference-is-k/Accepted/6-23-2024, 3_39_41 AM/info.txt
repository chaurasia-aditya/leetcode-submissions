{"id":1297530287,"question_id":2387,"lang":"java","lang_name":"Java","time":"2 days, 18 hours","timestamp":1719128381,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1297530287/","is_pending":"Not Pending","title":"Partition Array Such That Maximum Difference Is K","memory":"60.3 MB","code":"class Solution {\n    public int partitionArray(int[] nums, int k) {\n        int max = -1;\n        int count = 0;\n\n        for(int num:nums)\n            max = Math.max(max, num);\n\n        boolean[] exists = new boolean[max+1];\n\n        for(int num:nums)\n            exists[num] = true;\n\n        for(int i=0;i<=max;i++){\n            if(exists[i] == false){\n                continue;\n            }\n            count++;\n            i+=k;\n        }\n\n        return count;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-array-such-that-maximum-difference-is-k","has_notes":false,"flag_type":1}