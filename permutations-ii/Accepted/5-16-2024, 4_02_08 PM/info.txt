{"id":1259958259,"question_id":47,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1715889728,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1259958259/","is_pending":"Not Pending","title":"Permutations II","memory":"44.6 MB","code":"class Solution {\n    void backtrack(int size, int n, int[] nums, boolean[] visited, ArrayList<Integer> cur, List<List<Integer>> res){\n        if(size == n){\n            res.add((List)cur.clone());\n            return;\n        }\n\n        for(int i=0;i<n;){\n            if(!visited[i]){\n                visited[i] = true;\n                cur.add(nums[i]);\n                backtrack(size+1, n, nums, visited, cur, res);\n                cur.remove(cur.size()-1);\n                visited[i] = false;\n                i++;\n                while(i<n && nums[i] == nums[i-1])\n                    i++;\n                continue;\n            }\n            i++;\n        }\n    }\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        int n = nums.length;\n        List<List<Integer>> res = new ArrayList<>();\n        Arrays.sort(nums);\n        boolean[] visited = new boolean[n];\n\n        backtrack(0, n, nums, visited, new ArrayList<Integer>(), res);\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1}