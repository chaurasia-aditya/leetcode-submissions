{"id":1185391582,"question_id":1014,"lang":"java","lang_name":"Java","time":"4Â months","timestamp":1708832135,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1185391582/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"53.1 MB","code":"class Solution {\n    class point implements Comparable<point>{\n        public int x, y;\n        double dist;\n\n        point(int x, int y){\n            this.x = x;\n            this.y = y;\n            this.dist = Math.sqrt(x*x + y*y);\n        }\n\n        public int compareTo(point p){\n            return this.dist>p.dist?1:-1;\n        }\n    }\n    public int[][] kClosest(int[][] points, int k) {\n        int n = points.length;\n        int[][] res = new int[k][2];\n        // point parr[] = new point[n];\n        // for(int i=0;i<n;i++){\n        //     parr[i] = new point(points[i][0],points[i][1]);\n        // }\n\n        // Arrays.sort(parr);\n\n        // for(int i=0;i<k;i++){\n        //     res[i][0] = parr[i].x;\n        //     res[i][1] = parr[i].y;\n        // }\n\n        Arrays.sort(points, new Comparator<int[]>(){\n            public int compare(int[] a, int[] b){\n                double dist1 = Math.sqrt(a[0]*a[0]+ a[1]*a[1]);\n                double dist2 = Math.sqrt(b[0]*b[0] + b[1]*b[1]);\n                return dist1>dist2?1:-1;\n            }\n        });\n\n        for(int i=0;i<k;i++){\n            res[i][0] = points[i][0];\n            res[i][1] = points[i][1];\n        }\n\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-closest-points-to-origin","has_notes":false,"flag_type":1}