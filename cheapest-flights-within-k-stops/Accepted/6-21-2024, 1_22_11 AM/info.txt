{"id":1295269497,"question_id":803,"lang":"java","lang_name":"Java","time":"4 days, 21 hours","timestamp":1718947331,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1295269497/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"44 MB","code":"class Solution {\n    class Pair{\n        int node, cost;\n\n        Pair(int n, int c){\n            node = n;\n            cost = c;\n        }\n    }\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        int[] cost = new int[n];\n        Arrays.fill(cost, Integer.MAX_VALUE);\n\n        int[][] grid = new int[n][n];\n\n        for(int[] f:flights){\n            grid[f[0]][f[1]] = f[2];\n        }\n\n        Queue<Pair> q = new LinkedList<>();\n        q.add(new Pair(src, 0));\n\n        k++;\n\n        while(!q.isEmpty() && k>0){\n            int size = q.size();\n\n            while(size-->0){\n                Pair cur = q.poll();\n                for(int i=0;i<n;i++){\n                    if(grid[cur.node][i] != 0 && cur.cost+grid[cur.node][i]<cost[i]){\n                        q.offer(new Pair(i, cur.cost+grid[cur.node][i]));\n                        cost[i] = cur.cost+grid[cur.node][i];\n                    }\n                }\n            }\n\n            k--;\n        }\n\n        return cost[dst] == Integer.MAX_VALUE?-1:cost[dst];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"cheapest-flights-within-k-stops","has_notes":false,"flag_type":1}