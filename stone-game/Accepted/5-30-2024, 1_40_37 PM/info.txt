{"id":1272591892,"question_id":909,"lang":"java","lang_name":"Java","time":"3 weeks, 5 days","timestamp":1717090837,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1272591892/","is_pending":"Not Pending","title":"Stone Game","memory":"43.9 MB","code":"class Solution {\n    int getMax(int st, int end, int n, int[] piles, int[][] dp){\n        if(st>end)\n            return 0;\n\n        if(dp[st][end]!=-1)\n            return dp[st][end];\n        \n        int takeFirst = piles[st]+Math.min(getMax(st+2, end, n, piles, dp), getMax(st+1, end-1, n, piles, dp));\n\n        int takeLast = piles[end]+Math.min(getMax(st, end-2, n, piles, dp), getMax(st+1, end-1, n, piles, dp));\n\n        dp[st][end] = Math.max(takeFirst, takeLast);\n        return dp[st][end];\n    }\n    public boolean stoneGame(int[] piles) {\n        int n = piles.length;\n        int total = 0;\n\n        for(int i: piles)\n            total+=i;\n\n        int[][] dp = new int[n][n];\n        for(int[] i: dp)\n            Arrays.fill(i, -1);\n        \n        for(int i=0;i<n;i++)\n            dp[i][i] = piles[i];\n        \n        int max = getMax(0, n-1, n, piles, dp);\n\n        return max>total-max;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"stone-game","has_notes":false,"flag_type":1}