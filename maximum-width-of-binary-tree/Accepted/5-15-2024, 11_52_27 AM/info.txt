{"id":1258831670,"question_id":662,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1715788347,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1258831670/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"43.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\nclass pair{\n    TreeNode node;\n    int size;\n    \n    pair(TreeNode n, int s){\n        node = n;\n        size = s;\n    }\n};\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n        if(root == null)\n            return 0;\n        \n        int width = Integer.MIN_VALUE;\n        \n        LinkedList<pair> q = new LinkedList<>();\n        \n        q.add(new pair(root, 0));\n        \n        while(q.isEmpty() == false){\n            int qsize = q.size();\n            width = Math.max(width, q.getLast().size - q.getFirst().size + 1);\n            \n            for(int i=0;i<qsize;i++){\n                pair cur = q.removeFirst();\n                if(cur.node.left!=null){\n                    q.add(new pair(cur.node.left, 2*cur.size));\n                }\n                if(cur.node.right!=null){\n                    q.add(new pair(cur.node.right, 2*cur.size+1));\n                }\n            }            \n        }\n        return width;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}