{"id":1288595470,"question_id":1331,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1718413620,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1288595470/","is_pending":"Not Pending","title":"Path with Maximum Gold","memory":"40.8 MB","code":"class Solution {\n    int dfs(int i, int j, int m, int n, int curSum, int[][] grid){\n        if(i<0 || j<0 || i>=m || j>=n || grid[i][j] <= 0){\n            return curSum;\n        }\n\n        int val = grid[i][j]+curSum;\n        grid[i][j]*=-1;\n\n        int tempMax = Math.max(dfs(i+1, j, m, n, val, grid), \n                        Math.max(dfs(i-1, j, m, n, val, grid), \n                            Math.max(dfs(i, j+1, m, n, val, grid), dfs(i, j-1, m, n, val, grid))));\n\n        grid[i][j]*=-1;\n        return tempMax;\n    }\n\n    public int getMaximumGold(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int max = 0;\n\n        for(int i=0; i<m; i++){\n            for(int j=0;j<n;j++){\n                if(grid[i][j] != 0){\n                    max = Math.max(max, dfs(i, j, m, n, 0, grid));\n                }\n            }\n        }  \n\n        return max;  \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-gold","has_notes":false,"flag_type":1}