{"id":1288587084,"question_id":1331,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1718412048,"status":10,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/1288587084/","is_pending":"Not Pending","title":"Path with Maximum Gold","memory":"41.3 MB","code":"class Solution {\n    int max = 0;\n    void dfs(int i, int j, int m, int n, int cur, boolean[][] visited, int[][] grid){\n        if(i<0 || j<0 || i>=m || j>=n || visited[i][j] || grid[i][j] == 0){\n            max = Math.max(max, cur);\n            return;\n        }\n\n        visited[i][j] = true;\n        dfs(i+1, j, m, n, cur+grid[i][j], visited, grid);\n        dfs(i-1, j, m, n, cur+grid[i][j], visited, grid);\n        dfs(i, j+1, m, n, cur+grid[i][j], visited, grid);\n        dfs(i, j-1, m, n, cur+grid[i][j], visited, grid);\n        visited[i][j] = false;\n    }\n\n    public int getMaximumGold(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        for(int i=0; i<m; i++){\n            for(int j=0;j<n;j++){\n                if(grid[i][j] != 0){\n                    dfs(i, j, m, n, 0, new boolean[m][n], grid);\n                }\n            }\n        }  \n\n        return max;  \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-gold","has_notes":false,"flag_type":1}