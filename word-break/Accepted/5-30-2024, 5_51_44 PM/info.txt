{"id":1272760678,"question_id":139,"lang":"java","lang_name":"Java","time":"3 weeks, 5 days","timestamp":1717105904,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1272760678/","is_pending":"Not Pending","title":"Word Break","memory":"44.6 MB","code":"class Solution {\n    public boolean recur(String left, Set<String> hs, Map<String, Boolean> memo){\n        if(memo.containsKey(left))\n            return memo.get(left);\n\n        if(hs.contains(left))\n            return true;\n\n        for(int i=1;i<left.length();i++){\n            if(hs.contains(left.substring(0, i)) && recur(left.substring(i), hs, memo)){\n                memo.put(left, true);\n                return true;\n            }\n        }\n\n        memo.put(left, false);\n        return false;\n    }\n    public boolean wordBreak(String s, List<String> wordDict) {\n        int n =s.length();\n        Set<String> hs = new HashSet<>();\n        \n        //DP\n        // int maxLen = 0;\n\n        // for(String str: wordDict){\n        //     maxLen = maxLen<str.length()?str.length():maxLen;\n        //     hs.add(str);\n        // }\n\n        // boolean[] dp = new boolean[n+1];\n        // dp[0] = true;\n\n        // for(int i=1; i<=n;i++){\n        //     for(int j=i-1;j>=Math.max(i-maxLen-1, 0);j--){\n        //         if(dp[j] && hs.contains(s.substring(j, i))){\n        //             dp[i] = true;\n        //             break;\n        //         }\n        //     }\n        // }\n        // return dp[n];\n\n\n        //Recursive\n        hs.addAll(wordDict);\n        Map<String, Boolean> memo = new HashMap<>();\n        return recur(s, hs, memo);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"word-break","has_notes":false,"flag_type":1}