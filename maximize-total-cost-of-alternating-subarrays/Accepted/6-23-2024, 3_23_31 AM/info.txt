{"id":1297517129,"question_id":3464,"lang":"java","lang_name":"Java","time":"2 days, 19 hours","timestamp":1719127411,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1297517129/","is_pending":"Not Pending","title":"Maximize Total Cost of Alternating Subarrays","memory":"61.5 MB","code":"class Solution {\n    public long maximumTotalCost(int[] nums) {\n        int n = nums.length;\n\n        long add = nums[0];\n        long sub = nums[0];\n\n        for(int i=1;i<n;i++){\n            long temp1 = Math.max(add, sub)+nums[i];\n            long temp2 = add-nums[i];\n            add = temp1;\n            sub = temp2;\n        }\n\n        return Math.max(add, sub);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-total-cost-of-alternating-subarrays","has_notes":false,"flag_type":1}