{"id":1274791073,"question_id":3445,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1717298783,"status":10,"status_display":"Accepted","runtime":"267 ms","url":"/submissions/detail/1274791073/","is_pending":"Not Pending","title":"Lexicographically Minimum String After Removing Stars","memory":"55.2 MB","code":"class Solution {\n    class Pair implements Comparable<Pair>{\n        char ch;\n        int pos;\n        \n        public Pair(char c, int p){\n            ch = c;\n            pos = p;\n        }\n            \n        public int compareTo(Pair b){\n            if(ch!=b.ch){\n                return ch-b.ch;\n            }else{\n                return b.pos-pos;\n            }\n        }\n            \n    }\n    public String clearStars(String s) {\n        PriorityQueue<Pair> pq = new PriorityQueue();\n        ArrayList<Integer> toDelete = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        // int i = 0;\n        for(char ch:s.toCharArray()){\n            if(ch == '*'){\n                Pair p = pq.poll();\n                // sb.deleteCharAt(p.pos);\n                toDelete.add(p.pos);\n            }else{\n                sb.append(ch);\n                pq.add(new Pair(ch, sb.length()-1));\n            }\n            // i++;\n        }\n        \n        Collections.sort(toDelete);\n        \n        for(int i=toDelete.size()-1;i>=0;i--){\n            sb.deleteCharAt(toDelete.get(i));\n        }\n\n        return sb.toString();\n    }\n}","compare_resulttitle_slug":"lexicographically-minimum-string-after-removing-stars","has_notes":false,"flag_type":1}