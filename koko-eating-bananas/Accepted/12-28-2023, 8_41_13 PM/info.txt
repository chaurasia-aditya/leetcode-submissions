{"id":1131002596,"question_id":907,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1703814073,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1131002596/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"44.8 MB","code":"class Solution {\n    public boolean isValid(int[] piles, int n, int k, int h){\n        int count = 0;\n        for(int i=0;i<n;i++){\n            count+=((piles[i]+k-1)/k);\n            if(count>h){\n                return false;\n            }\n        }\n        return true;\n    }\n    public int minEatingSpeed(int[] piles, int h) {\n        int n = piles.length;\n        int max= piles[0];\n        for(int i=1;i<n;i++){\n            max = Math.max(max, piles[i]);\n        }\n        int mid, low = 1, high = max;\n\n        while(low<high){\n            mid = low+(high-low)/2;\n            // System.out.println(low+\" \"+mid+\" \"+high);\n            if(isValid(piles, n, mid, h)){\n                high=mid;\n            }else{\n                low = mid+1;\n            }\n        }\n        return low;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}