{"id":1204946183,"question_id":146,"lang":"c","lang_name":"C","time":"3 months, 1 week","timestamp":1710565800,"status":10,"status_display":"Accepted","runtime":"350 ms","url":"/submissions/detail/1204946183/","is_pending":"Not Pending","title":"LRU Cache","memory":"110.2 MB","code":"#define HASH_SIZE 9001\n\ntypedef struct element{\n    int key, value;\n    struct element *next, *prev;\n}element;\n\ntypedef struct {\n    element *cache_head, *cache_tail;\n    int capacity, count;\n    element *hash[HASH_SIZE];\n} LRUCache;\n\n\nvoid insertEntry(LRUCache*obj, element *cur){\n    if(cur == NULL)\n        return;\n\n    // printf(\"| In Insert |\");\n    cur->prev = obj->cache_tail;\n    cur->next = NULL;\n    \n    if(obj->cache_tail!=NULL)\n        obj->cache_tail->next = cur;\n\n    obj->cache_tail = cur;\n\n    if(obj->cache_head == NULL){\n        obj->cache_head = cur;\n    }\n\n    obj->hash[cur->key] = cur;\n    obj->count++;\n\n    if(obj->count > obj->capacity){\n        // printf(\"| Capacity Full! |\");\n        element* temp = obj->cache_head;\n        obj->cache_head = obj->cache_head->next;\n        if(obj->cache_head != NULL)\n            obj->cache_head->prev = NULL;\n        else\n            obj->cache_tail = NULL;\n\n        obj->hash[temp->key] = NULL;\n        free(temp);\n\n        obj->count--;\n    }\n\n}\n\nvoid updateEntry(LRUCache* obj, element *cur){\n    if(cur == NULL)\n        return;\n    // printf(\"| In Update |\");\n    if(cur == obj->cache_tail){\n        return;\n    }else if(cur == obj->cache_head){\n        obj->cache_head = obj->cache_head->next;\n        if(obj->cache_head != NULL)\n            obj->cache_head->prev = NULL;\n        cur->prev = obj->cache_tail;\n        cur->next = NULL;\n        obj->cache_tail->next = cur;\n        obj->cache_tail = cur;\n    }else{\n        cur->prev->next = cur->next;\n        cur->next->prev = cur->prev;\n        cur->next = NULL;\n        cur->prev = obj->cache_tail;\n        obj->cache_tail->next = cur;\n        obj->cache_tail = cur;\n    }\n}\n\n// void print(LRUCache *obj){\n//     element *cur = obj->cache_head;\n//     printf(\"count = %d  | \", obj->count);\n//     while(cur){\n//         printf(\"|%d - %d \", cur->key, cur->value);\n//         cur = cur->next;\n//     }\n//     printf(\"\\n\");\n// }\n\n// element* isPresent(LRUCache* obj, int key){\n//     if(obj->cache_head == NULL)\n//         return NULL;\n//     element* cur = obj->cache_head;\n//     while(cur){\n//         if(cur->key == key)\n//             return cur;\n//         cur = cur->next;\n//     }\n//     return NULL;\n// }\n\nelement* isPresent(LRUCache* obj, int key){\n    return obj->hash[key];\n}\n\nLRUCache* lRUCacheCreate(int capacity) {\n    LRUCache *lru = (LRUCache*)malloc(sizeof(LRUCache));\n    lru->cache_head = NULL;\n    lru->cache_tail = NULL;\n    lru->capacity = capacity;\n    lru->count = 0;\n    for (size_t i = 0; i < HASH_SIZE; i++)\n        lru->hash[i] = NULL;\n    // printf(\"CREATE: \");\n    // print(lru);\n    // printf(\"\\n\");\n    return lru; \n}\n\nint lRUCacheGet(LRUCache* obj, int key) {\n    element* cur = isPresent(obj, key);\n    // printf(\"GET: \");\n    if(cur == NULL){\n        return -1;\n    }else{\n        updateEntry(obj, cur);\n        // print(obj);\n        // printf(\"\\n\");\n        return cur->value;\n    }\n}\n\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n    element *cur = isPresent(obj, key);\n    // printf(\"PUT: \");\n\n    if(cur == NULL){\n        cur = (element*)malloc(sizeof(element));\n        cur->key = key;\n        cur->value = value;\n        cur->prev = NULL;\n        cur->next = NULL;\n        insertEntry(obj, cur);\n    }else{\n        cur->value = value;\n        updateEntry(obj, cur);\n    }\n    // print(obj);\n    // printf(\"\\n\");\n}\n\nvoid lRUCacheFree(LRUCache* obj) {\n    element* cur;\n    while(obj->cache_head){\n        cur = obj->cache_head;\n        obj->cache_head = obj->cache_head->next;\n        free(cur); \n    }\n    free(obj);\n}\n\n/**\n * Your LRUCache struct will be instantiated and called as such:\n * LRUCache* obj = lRUCacheCreate(capacity);\n * int param_1 = lRUCacheGet(obj, key);\n \n * lRUCachePut(obj, key, value);\n \n * lRUCacheFree(obj);\n*/","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}