{"id":1267868557,"question_id":207,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1716669404,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1267868557/","is_pending":"Not Pending","title":"Course Schedule","memory":"44.2 MB","code":"class Solution {\n\n    public boolean hasCycle(int i, int n, boolean[] visited, boolean[] recStack, List<List<Integer>> graph){\n        if(recStack[i])\n            return true;\n        if(visited[i])\n            return false;\n        \n        recStack[i] = true;\n        visited[i] = true;\n        \n        List<Integer> cur = graph.get(i);\n\n        for(Integer c:cur){\n            if(hasCycle(c, n, visited, recStack, graph))\n                return true;\n        }\n\n        recStack[i]= false;\n\n        return false;\n    }\n\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        List<List<Integer>> graph = new ArrayList<>();\n\n        for(int i=0;i<numCourses;i++)\n            graph.add(new ArrayList<>());\n\n        for(int[] cur:prerequisites){\n            graph.get(cur[1]).add(cur[0]);\n        }\n\n        boolean[] visited = new boolean[numCourses];\n        boolean[] recStack = new boolean[numCourses];\n \n        for (int i = 0; i < numCourses; i++)\n            if (hasCycle(i, numCourses, visited, recStack, graph))\n                return false;\n \n        return true;\n\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"course-schedule","has_notes":false,"flag_type":1}