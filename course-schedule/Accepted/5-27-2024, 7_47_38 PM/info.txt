{"id":1269888652,"question_id":207,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1716853658,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1269888652/","is_pending":"Not Pending","title":"Course Schedule","memory":"44 MB","code":"class Solution {\n    \n    boolean hasCycle(int i, int n, ArrayList<Integer>[] graph, boolean[] visited, boolean[] curPath){\n        if(curPath[i] == true)\n            return true;\n\n        if(visited[i])\n            return false;\n\n        visited[i] = true;\n        curPath[i] = true;\n\n        ArrayList<Integer> cur = graph[i];\n\n        for(int next: cur){\n            if(hasCycle(next, n, graph, visited, curPath)){\n                return true;\n            }\n        }\n\n        curPath[i] = false;\n\n        return false;\n    }\n\n    public boolean canFinish(int n, int[][] prerequisites) {\n        ArrayList<Integer>[] graph = new ArrayList[n];\n\n        for(int i=0;i<n;i++){\n            graph[i] = new ArrayList<>();\n        }\n\n        for(int[] a:prerequisites){\n            graph[a[1]].add(a[0]);\n        }\n        \n        boolean[] visited = new boolean[n];\n        boolean[] curPath = new boolean[n];\n\n        for(int i=0;i<n;i++){\n            if(hasCycle(i, n, graph, visited, curPath)){\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"course-schedule","has_notes":false,"flag_type":1}