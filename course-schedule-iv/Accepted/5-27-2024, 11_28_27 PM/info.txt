{"id":1269995977,"question_id":1558,"lang":"java","lang_name":"Java","time":"4Â weeks","timestamp":1716866907,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1269995977/","is_pending":"Not Pending","title":"Course Schedule IV","memory":"49.9 MB","code":"class Solution {\n     public void dfs(int i, List<Integer>[] graph, Set<Integer>[] pre){           \n        for(Integer c:graph[i]){\n            if(!pre[i].contains(c)){\n                pre[i].add(c);\n                dfs(c, graph, pre);\n                pre[i].addAll(pre[c]);\n            }\n        }\n    }\n\n    public List<Boolean> checkIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {\n        ArrayList<Integer>[] graph = new ArrayList[n];\n        Set<Integer>[] pre = new HashSet[n];\n\n        for(int i=0;i<n;i++){\n            graph[i] = new ArrayList<>();\n            pre[i] = new HashSet<>();\n        }\n\n        for(int[] cur:prerequisites){\n            graph[cur[0]].add(cur[1]);\n        }\n\n        boolean[] visited = new boolean[n];\n \n        for (int i = 0; i < n; i++)\n            dfs(i, graph, pre);\n\n        List<Boolean> res = new ArrayList<>();\n        for(int[] q:queries){\n            res.add(pre[q[0]].contains(q[1]));\n        }\n\n        return res;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"course-schedule-iv","has_notes":false,"flag_type":1}