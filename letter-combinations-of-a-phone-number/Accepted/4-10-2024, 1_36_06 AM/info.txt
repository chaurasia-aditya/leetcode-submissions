{"id":1228261190,"question_id":17,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1712727366,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1228261190/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"41.8 MB","code":"class Solution {\n    static char[][] map = {{},{},{'a','b','c'},{'d','e','f'},{'g','h','i'},{'j','k','l'},\n                                    {'m','n','o'},{'p','q','r','s'},{'t','u','v'},{'w','x','y','z'}};\n    public void backtrack(int pos, int n, String s, List<String> res, StringBuilder sb){\n        if(pos==n){\n            res.add(sb.toString());\n            return;\n        }\n\n        int index = s.charAt(pos)-'0';\n        for(int i=0; i<map[index].length;i++){\n            sb.append(map[index][i]);\n            backtrack(pos+1, n, s, res, sb);\n            sb.deleteCharAt(pos);\n        }\n    }\n    \n    public List<String> letterCombinations(String digits) {\n        List<String> res = new ArrayList<>();\n        if(digits.length() == 0)\n            return res;\n\n        backtrack(0, digits.length(), digits, res, new StringBuilder());\n\n        return res;\n    }\n}","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}