{"id":1165480000,"question_id":3272,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1707019083,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/1165480000/","is_pending":"Not Pending","title":"Find the Grid of Region Average","memory":"93 MB","code":"class Solution {\n    public int[][] resultGrid(int[][] nums, int threshold) {\n        // System.out.println(\"New\");\n        int m = nums.length;\n        int n = nums[0].length;\n        int[][] regions = new int[m][n];\n        int[][] res = new int[m][n];\n        int[][] count = new int[m][n];\n        for(int i=1;i<m-1;i++){\n            for(int j=1;j<n-1;j++){\n                int center = nums[i][j];\n                \n                boolean topleft = ((Math.abs(nums[i-1][j-1] - nums[i-1][j])<=threshold) && (Math.abs(nums[i-1][j-1] - nums[i][j-1])<=threshold));\n                \n                boolean topright = ((Math.abs(nums[i-1][j+1] - nums[i-1][j])<=threshold) && (Math.abs(nums[i-1][j+1] - nums[i][j+1])<=threshold));\n                boolean bottomleft = ((Math.abs(nums[i+1][j-1] - nums[i+1][j])<=threshold) && (Math.abs(nums[i+1][j-1] - nums[i][j-1])<=threshold));\n                boolean bottomright = ((Math.abs(nums[i+1][j+1] - nums[i+1][j])<=threshold) && (Math.abs(nums[i+1][j+1] - nums[i][j+1])<=threshold));\n                \n                int one = Math.abs(center - nums[i-1][j-1]);\n                int two = Math.abs(center - nums[i-1][j]);\n                int thr = Math.abs(center - nums[i-1][j+1]);\n                int fou = Math.abs(center - nums[i][j-1]);\n                int fiv = Math.abs(center - nums[i][j+1]);\n                int six = Math.abs(center - nums[i+1][j-1]);\n                int sev = Math.abs(center - nums[i+1][j]);\n                int eig = Math.abs(center - nums[i+1][j+1]);\n                \n                \n                if(two<=threshold && fou<=threshold && fiv<=threshold && sev<=threshold && topleft && bottomleft && topright && bottomright/*(one+thr+six+sev)<=(8*threshold)*/){\n                    // System.out.println(\"i=\"+i+\" j =\"+j);\n                    regions[i][j] = (nums[i-1][j-1] + nums[i-1][j]+ nums[i-1][j+1]+nums[i][j-1]+nums[i][j]+nums[i][j+1]+nums[i+1][j-1]+nums[i+1][j]+nums[i+1][j+1])/9;\n                    \n                    // res[i-1][j-1] = (res[i-1][j-1] * count[i-1][j-1] + regions[i][j])/(++count[i-1][j-1]);\n                    // res[i-1][j] = (res[i-1][j] * count[i-1][j] + regions[i][j])/(++count[i-1][j]);\n                    // res[i-1][j+1] = (res[i-1][j+1] * count[i-1][j+1] + regions[i][j])/(++count[i-1][j+1]);\n                    // res[i][j-1] = (res[i][j-1] * count[i][j-1] + regions[i][j])/(++count[i][j-1]);\n                    // res[i][j] = (res[i][j] * count[i][j] + regions[i][j])/(++count[i][j]);\n                    // res[i][j+1] = (res[i][j+1] * count[i][j+1] + regions[i][j])/(++count[i][j+1]);\n                    // res[i+1][j-1] = (res[i+1][j-1] * count[i+1][j-1] + regions[i][j])/(++count[i+1][j-1]);\n                    // res[i+1][j] = (res[i+1][j] * count[i+1][j] + regions[i][j])/(++count[i+1][j]);\n                    // res[i+1][j+1] = (res[i+1][j+1] * count[i+1][j+1] + regions[i][j])/(++count[i+1][j+1]);   \n                    \n                    ++count[i-1][j-1];\n                    ++count[i-1][j];\n                    ++count[i-1][j+1];\n                    ++count[i][j-1];\n                    ++count[i][j];\n                    ++count[i][j+1];\n                    ++count[i+1][j-1];\n                    ++count[i+1][j];\n                    ++count[i+1][j+1];\n                    \n                    // for(int k=0;k<m;k++){\n                    //     for(int l=0;l<n;l++){\n                    //         System.out.print(res[k][l]+\" \");\n                    //     }\n                    //     System.out.println();\n                    // }\n                }\n            }\n        }\n        \n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(count[i][j] == 0){\n                    res[i][j] = nums[i][j];\n                    continue;\n                }\n                \n                res[i][j]+=regions[i][j];                \n                if(i>0){\n                    res[i][j] += regions[i-1][j];\n                    if(j>0){\n                        res[i][j]+=regions[i][j-1];\n                        res[i][j] += regions[i-1][j-1];\n                    }\n                    if(j<n-1){\n                        res[i][j]+=regions[i-1][j+1];\n                        res[i][j]+=regions[i][j+1];\n                    }\n                }\n                if(i<m-1){\n                    res[i][j] += regions[i+1][j];\n                    if(j>0){\n                        res[i][j]+=regions[i+1][j-1];\n                    }\n                    if(j<n-1){\n                        res[i][j]+=regions[i+1][j+1];\n                    }\n                }\n                \n                res[i][j]/=count[i][j];\n            }\n        }\n        \n        return res;\n    }\n}","compare_resulttitle_slug":"find-the-grid-of-region-average","has_notes":false,"flag_type":1}