{"id":1183639162,"question_id":3314,"lang":"java","lang_name":"Java","time":"4Â months","timestamp":1708661456,"status":10,"status_display":"Accepted","runtime":"1993 ms","url":"/submissions/detail/1183639162/","is_pending":"Not Pending","title":"Most Frequent Prime","memory":"54.1 MB","code":"class Solution {\n    int max = 999999;\n//     void sieveOfEratosthenes(int n)\n//     {\n//         boolean prime[] = new boolean[n + 1];\n//         for (int i = 0; i <= n; i++)\n//             prime[i] = true;\n \n//         for (int p = 2; p * p <= n; p++) {\n//             if (prime[p] == true) {\n//                 for (int i = p * p; i <= n; i += p)\n//                     prime[i] = false;\n//             }\n//         }\n \n//         // Print all prime numbers\n//         for (int i = 2; i <= n; i++) {\n//             if (prime[i] == true)\n//                 System.out.print(i + \" \");\n//         }\n//     }\n    public int mostFrequentPrime(int[][] mat) {\n        boolean prime[] = new boolean[max + 1];\n        int count[] = new int[max+1];\n        for (int i = 0; i <= max; i++)\n            prime[i] = true;\n \n        for (int p = 2; p * p <= max; p++) {\n            if (prime[p] == true) {\n                for (int i = p * p; i <= max; i += p)\n                    prime[i] = false;\n            }\n        }\n        \n        int m = mat.length;\n        int n = mat[0].length;\n        \n        int res = -1;\n        int c = 0;\n        \n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                // System.out.print(\"i= \"+i+\" j= \"+j);\n                int cur = mat[i][j];\n                \n                // if(prime[cur]){\n                //     count[cur]++;\n                //     if(count[cur]>c || (count[cur]==c && cur>res)){\n                //         res = cur;\n                //         c = count[cur];\n                //     }\n                // }\n                \n                //east\n                int k = j+1;\n                while(k<n){\n                    cur = cur*10+mat[i][k];\n                    // if(prime[cur] && cur>res){\n                    //     // System.out.print(\"i= \"+i+\" j= \"+j);\n                    //     res = cur;\n                    // }\n                    if(cur>10 && prime[cur]){\n                        count[cur]++;\n                        if(count[cur]>c || (count[cur]==c && cur>res)){\n                            res = cur;\n                            c = count[cur];\n                        }\n                    }\n                    k++;\n                }\n                \n                //south-east\n                cur = mat[i][j];\n                k = i+1;\n                int l = j+1;\n                \n                while(k<m && l<n){\n                    cur = cur*10+mat[k][l];\n                    if(cur>10 && prime[cur]){\n                        count[cur]++;\n                        if(count[cur]>c || (count[cur]==c && cur>res)){\n                            res = cur;\n                            c = count[cur];\n                        }\n                    }\n                    k++;\n                    l++;\n                }\n                \n                //south\n                cur = mat[i][j];\n                k = i+1;\n                while(k<m){\n                    cur = cur*10+mat[k][j];\n                    if(cur>10 && prime[cur]){\n                        count[cur]++;\n                        if(count[cur]>c || (count[cur]==c && cur>res)){\n                            res = cur;\n                            c = count[cur];\n                        }\n                    }\n                    k++;\n                }\n                \n                //south-west \n                cur = mat[i][j];\n                \n                k = i+1;\n                l = j-1;\n                \n                while(k<m && l>=0){\n                    cur = cur*10+mat[k][l];\n                    if(cur>10 && prime[cur]){\n                        count[cur]++;\n                        if(count[cur]>c || (count[cur]==c && cur>res)){\n                            res = cur;\n                            c = count[cur];\n                        }\n                    }\n                    k++;\n                    l--;\n                }\n                \n                //west\n                cur = mat[i][j];\n                k = j-1;\n                while(k>=0){\n                    cur = cur*10+mat[i][k];\n                    if(cur>10 && prime[cur]){\n                        count[cur]++;\n                        if(count[cur]>c || (count[cur]==c && cur>res)){\n                            res = cur;\n                            c = count[cur];\n                        }\n                    }\n                    k--;\n                }\n                \n                //north-west\n                cur = mat[i][j];\n                k = i-1;\n                l = j-1;\n                \n                while(k>=0 && l>=0){\n                    cur = cur*10+mat[k][l];\n                    if(cur>10 && prime[cur]){\n                        count[cur]++;\n                        if(count[cur]>c || (count[cur]==c && cur>res)){\n                            res = cur;\n                            c = count[cur];\n                        }\n                    }\n                    k--;\n                    l--;\n                }\n                \n                //north\n                cur = mat[i][j];\n                k = i-1;\n                while(k>=0){\n                    cur = cur*10+mat[k][j];\n                    if(cur>10 && prime[cur]){\n                        count[cur]++;\n                        if(count[cur]>c || (count[cur]==c && cur>res)){\n                            res = cur;\n                            c = count[cur];\n                        }\n                    }\n                    k--;\n                }\n                \n                //north-east\n                cur = mat[i][j];\n                k = i-1;\n                l = j+1;\n                \n                while(k>=0 && l<n){\n                    cur = cur*10+mat[k][l];\n                    if(cur>10 && prime[cur]){\n                        count[cur]++;\n                        if(count[cur]>c || (count[cur]==c && cur>res)){\n                            res = cur;\n                            c = count[cur];\n                        }\n                    }\n                    k--;\n                    l++;\n                }\n            }\n        }\n        return res;\n    }\n}","compare_resulttitle_slug":"most-frequent-prime","has_notes":false,"flag_type":1}