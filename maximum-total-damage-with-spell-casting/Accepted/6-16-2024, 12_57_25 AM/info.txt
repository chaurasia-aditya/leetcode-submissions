{"id":1289776531,"question_id":3437,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1718513845,"status":10,"status_display":"Accepted","runtime":"142 ms","url":"/submissions/detail/1289776531/","is_pending":"Not Pending","title":"Maximum Total Damage With Spell Casting","memory":"64.6 MB","code":"class Solution {\n    public long maximumTotalDamage(int[] power) {\n        long res = 0;\n        \n        Map<Integer, Integer> counts = new HashMap<>();\n        \n        for(int p:power)\n            counts.put(p, counts.getOrDefault(p, 0)+1);\n        \n        int[] arr = counts.keySet().stream().mapToInt(Integer::intValue).toArray();\n        \n        Arrays.sort(arr);\n        int n = arr.length;\n        \n        long[] dp = new long[n];\n        \n        \n        for(int i=0;i<n;i++){\n            long cur = (long)counts.get(arr[i])*arr[i];\n            \n            if(i==0){\n                dp[i] = cur;\n            }else{\n                dp[i] = dp[i-1];//exclude\n               \n                int j = i-1;\n                while(j>=0 && arr[i]-arr[j]<=2){\n                    j--;\n                }\n                if(j>=0)\n                    cur+=dp[j];\n                dp[i] = Math.max(dp[i], cur);                    \n            }\n        }\n        \n        return dp[n-1];\n    }\n}","compare_resulttitle_slug":"maximum-total-damage-with-spell-casting","has_notes":false,"flag_type":1}