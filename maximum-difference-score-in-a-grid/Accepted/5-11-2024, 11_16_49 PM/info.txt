{"id":1255733100,"question_id":3391,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1715483809,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1255733100/","is_pending":"Not Pending","title":"Maximum Difference Score in a Grid","memory":"58 MB","code":"class Solution {\n    public int maxScore(List<List<Integer>> grid) {\n        int m = grid.size();\n        int n = grid.get(0).size();\n//         long[][] dp = new long[m][n];\n        \n//         dp[m-1][n-1] = grid.get(m-1).get(n-1);\n        \n//         long max = Long.MIN_VALUE;\n        \n//         for (int i = m - 1; i >= 0; i--) {\n//             for (int j = n - 1; j >= 0; j--) {\n//                 if (i == m - 1 && j == n - 1) {\n//                     continue;\n//                 }\n\n//                 long downScore = Integer.MIN_VALUE;\n//                 long rightScore = Integer.MIN_VALUE;\n\n//                 if (i + 1 < m) {\n//                     downScore = dp[i + 1][j] - grid.get(i+1).get(j);\n//                 }\n\n//                 if (j + 1 < n) {\n//                     rightScore = dp[i][j + 1] + grid.get(i).get(j+1);\n//                 }\n\n//                 dp[i][j] = Math.max(downScore, rightScore);\n                \n//                 max = dp[i][j]>max?dp[i][j]:max;\n//             }\n//         }\n        \n        int[][] smallest = new int[m][n];\n\n        smallest[m - 1][n - 1] = grid.get(m-1).get(n-1);\n\n        // Fill the last column of the smallest array\n        for (int i = m - 2; i >= 0; i--) {\n            smallest[i][n - 1] = Math.max(grid.get(i).get(n-1), smallest[i + 1][n - 1]);\n        }\n\n        // Fill the last row of the smallest array\n        for (int j = n - 2; j >= 0; j--) {\n            smallest[m - 1][j] = Math.max(grid.get(m-1).get(j), smallest[m - 1][j + 1]);\n        }\n\n        // Fill the rest of the array\n        for (int i = m - 2; i >= 0; i--) {\n            for (int j = n - 2; j >= 0; j--) {\n                smallest[i][j] = Math.max(grid.get(i).get(j), Math.max(smallest[i + 1][j], smallest[i][j + 1]));\n            }\n        }\n        int res = Integer.MIN_VALUE;\n        \n        for(int i=0;i<m;i++){\n            for(int j = 0;j<n;j++){\n                int max = Integer.MIN_VALUE;\n                if(i==m-1 && j==n-1)\n                    continue;\n                if(i == m-1)\n                    max = smallest[i][j+1];\n                else if(j==n-1){\n                    max = smallest[i+1][j];\n                }else{\n                    max = Math.max(smallest[i][j+1], smallest[i+1][j]);\n                }\n                int score = max - grid.get(i).get(j);\n                res = (res<score)?score:res;\n                // System.out.print(smallest[i][j]+\" \");\n            }\n            // System.out.println();\n        }\n        \n        return res;\n    }\n}","compare_resulttitle_slug":"maximum-difference-score-in-a-grid","has_notes":false,"flag_type":1}