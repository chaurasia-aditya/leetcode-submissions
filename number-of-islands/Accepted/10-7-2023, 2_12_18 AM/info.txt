{"id":1069123119,"question_id":200,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1696659138,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1069123119/","is_pending":"Not Pending","title":"Number of Islands","memory":"47 MB","code":"class Solution {\n    boolean[][] visited;\n    void dfs(int i, int j, char[][] grid){\n        visited[i][j] = true;\n\n        if(i>=1 && grid[i-1][j] == '1' && !visited[i-1][j]){\n            dfs(i-1, j, grid);\n        }\n        if(i<grid.length-1 && grid[i+1][j] == '1' && !visited[i+1][j]){\n            dfs(i+1, j, grid);\n        }\n        if(j>=1 && grid[i][j-1] == '1' && !visited[i][j-1]){\n            dfs(i, j-1, grid);\n        }\n        if(j<grid[0].length-1 && grid[i][j+1] == '1' && !visited[i][j+1]){\n            dfs(i, j+1, grid);\n        }\n    }\n    public int numIslands(char[][] grid) {\n        visited = new boolean[grid.length][grid[0].length];\n        int count = 0;\n        for(int i=0;i<grid.length;i++){\n            for(int j=0;j<grid[0].length;j++){\n                if(grid[i][j] == '1' && !visited[i][j]){\n                    dfs(i, j, grid);\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}