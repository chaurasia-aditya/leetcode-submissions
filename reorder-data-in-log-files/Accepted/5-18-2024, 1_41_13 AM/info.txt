{"id":1261050079,"question_id":974,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1716010873,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1261050079/","is_pending":"Not Pending","title":"Reorder Data in Log Files","memory":"44.4 MB","code":"class Solution {\n    class Log implements Comparable<Log>{\n        String[] logs;\n        int index;\n        boolean isDigitLog;\n        \n        Log(String s, int i){\n            logs = s.split(\" \");\n            index = i;\n            // isDigitLog = true;\n            \n            if(Character.isDigit(logs[1].charAt(0)))\n                isDigitLog = true;\n            else\n                isDigitLog = false;\n            \n            // try { \n            //     Integer.parseInt(logs[1]); \n            // } catch(NumberFormatException e) { \n            //     isDigitLog = false; \n            // }\n        }\n        \n        public int compareTo(Log b){\n            if(this.isDigitLog == false && b.isDigitLog == true){\n                return -1;\n            }\n            \n            if(this.isDigitLog == true && b.isDigitLog == false){\n                return 1;\n            }\n            \n            if(this.isDigitLog == false){\n                int bl = b.logs.length;\n                int al = this.logs.length;\n                int i=1, j=1;\n                while(i<al && j<bl){\n                    int val = this.logs[i].compareTo(b.logs[j]);\n                    if(val!=0)\n                        return val;\n                    i++;\n                    j++;\n                }\n                \n                if(i!=al){\n                    return 1;\n                }else if(j!=bl){\n                    return -1;\n                }else{\n                    return this.logs[0].compareTo(b.logs[0]);\n                }\n                \n            }else{\n                return index - b.index;\n            }\n        }\n    };\n    \n    public String[] reorderLogFiles(String[] logs) {\n        int n = logs.length;\n        \n        Log[] log = new Log[n];\n        \n        for(int i=0;i<n;i++){\n            log[i] = new Log(logs[i], i);\n        }\n        \n        Arrays.sort(log);\n        \n        String[] res = new String[n];\n        \n        for(int i=0;i<n;i++){\n            // System.out.println(Arrays.toString(log[i].logs));\n            res[i] = logs[log[i].index];\n        }\n        \n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"reorder-data-in-log-files","has_notes":false,"flag_type":1}