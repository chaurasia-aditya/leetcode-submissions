{"id":1074591800,"question_id":102,"lang":"java","lang_name":"Java","time":"8 months, 2 weeks","timestamp":1697236331,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1074591800/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"43.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if(root == null)\n            return res;\n\n        Queue<TreeNode> level = new LinkedList<>();\n        List<Integer> cur = new ArrayList<>();\n        level.add(root);\n        int count = 1;\n        while(!level.isEmpty()){\n            TreeNode c = level.poll();\n\n            cur.add(c.val);\n\n            if(c.left!=null){\n                level.add(c.left);\n            }\n\n            if(c.right!=null){\n                level.add(c.right);\n            }\n\n            count--;\n            if(count == 0){\n                res.add(cur);\n                cur = new ArrayList<>();\n                count = level.size();\n            }\n        }    \n        return res;    \n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}