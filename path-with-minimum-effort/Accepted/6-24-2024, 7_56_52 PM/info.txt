{"id":1299262406,"question_id":1753,"lang":"java","lang_name":"Java","time":"1 day, 2 hours","timestamp":1719273412,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1299262406/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"44.8 MB","code":"class Solution {\n    public int minimumEffortPath(int[][] grid) {\n        int[] dx = new int[]{0, 0, 1, -1};\n        int[] dy = new int[]{1, -1, 0, 0};\n        int rows = grid.length;\n        int cols = grid[0].length;\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> a[0]-b[0]);\n        int[][] effort = new int[rows][cols];\n        \n        for (int i = 0; i < rows; i++) {\n            Arrays.fill(effort[i], Integer.MAX_VALUE);\n        }\n        effort[0][0] = 0;\n\n        pq.offer(new int[]{0, 0, 0});\n\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            int cur_x = cur[1];\n            int cur_y = cur[2];\n            int path_effort = cur[0];\n\n            if (cur_x == rows-1 && cur_y == cols-1) {\n                return path_effort;\n            }\n\n            for(int i=0;i<4;i++){\n                int new_x = cur_x+dx[i];\n                int new_y = cur_y+dy[i];\n\n                if(new_x>=0 && new_y>=0 && new_x<rows && new_y<cols){\n                    int new_effort = Math.max(path_effort, Math.abs(grid[new_x][new_y]-grid[cur_x][cur_y]));\n\n                    if(new_effort<effort[new_x][new_y]){\n                        effort[new_x][new_y] = new_effort;\n                        pq.offer(new int[]{new_effort, new_x, new_y});\n                    }\n                }\n            }\n        }\n\n        return -1;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort","has_notes":false,"flag_type":1}