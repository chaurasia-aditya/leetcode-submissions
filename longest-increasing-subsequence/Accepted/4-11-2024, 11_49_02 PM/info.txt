{"id":1230024981,"question_id":300,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1712893742,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1230024981/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"44.3 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n        List<Integer> res = new ArrayList<>();\n        int idx, size = 1;\n        res.add(nums[0]);\n \n        for (int i = 1; i < n; i++) {\n            if (nums[i] > res.get(size - 1)) {\n                res.add(nums[i]);\n                size++;\n            } else {\n                idx = Collections.binarySearch(res, nums[i]);\n                if (idx < 0) {\n                    idx = -(idx + 1);\n                }\n                res.set(idx, nums[i]);\n            }\n        }\n        return size;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}