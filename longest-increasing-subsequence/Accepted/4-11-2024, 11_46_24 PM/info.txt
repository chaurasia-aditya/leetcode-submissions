{"id":1230023432,"question_id":300,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1712893584,"status":10,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/1230023432/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"44.4 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        int max = 1;\n        for(int i=1;i<n;i++){\n            for(int j=0;j<i;j++){\n                dp[i] = nums[i]>nums[j]?Math.max(dp[i], dp[j]+1):dp[i];\n            }\n            max = Math.max(max, dp[i]);\n        }\n\n        return max;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}