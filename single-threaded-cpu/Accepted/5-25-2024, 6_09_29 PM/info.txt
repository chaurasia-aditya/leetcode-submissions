{"id":1267906653,"question_id":1962,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1716674969,"status":10,"status_display":"Accepted","runtime":"107 ms","url":"/submissions/detail/1267906653/","is_pending":"Not Pending","title":"Single-Threaded CPU","memory":"80.1 MB","code":"class Solution {\n    public int[] getOrder(int[][] tasks) {\n        int n = tasks.length;\n        int[][] sortTasks = new int[n][3];\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> (a[2]!=b[2])?a[2]-b[2]:a[0]-b[0]);\n\n        for(int i = 0; i<n;i++){\n            sortTasks[i][0] = i;\n            sortTasks[i][1] = tasks[i][0];\n            sortTasks[i][2] = tasks[i][1];\n        }\n\n        Arrays.sort(sortTasks, (a,b) -> a[1]-b[1]);\n\n        int cur = 0;\n        int i = 0;\n        int k = 0;\n        int[] res = new int[n];\n\n        while(i<n  || !pq.isEmpty()){\n            if(pq.isEmpty() && cur<sortTasks[i][1]){\n                cur = sortTasks[i][1];\n            }\n            \n            while(i<n && sortTasks[i][1]<=cur)\n                pq.add(sortTasks[i++]);\n            \n            int[] poll = pq.poll();\n            cur+=poll[2];\n            res[k++] = poll[0];\n        }\n\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"single-threaded-cpu","has_notes":false,"flag_type":1}