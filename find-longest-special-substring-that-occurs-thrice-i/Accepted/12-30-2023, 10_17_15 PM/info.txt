{"id":1132679000,"question_id":3267,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703992635,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1132679000/","is_pending":"Not Pending","title":"Find Longest Special Substring That Occurs Thrice I","memory":"43.1 MB","code":"class Solution {\n    public int maximumLength(String s) {\n        Map<Character, ArrayList<Integer>> count = new HashMap<>();\n        int cur_len=1;\n        char ch;\n        ch = s.charAt(0);\n        // count.add(new String(ch),1);\n        for(int i=1;i<s.length();i++){\n            char cur = s.charAt(i);\n            if(cur!=ch){\n                // System.out.print(\"i=\"+i+\" \");\n                if(count.containsKey(ch)){\n                    ArrayList<Integer> a = count.get(ch);\n                    // System.out.print(\"a.size()=\"+a.size());\n                    for(int j=0;j<cur_len;j++){\n                        if(j<a.size()){\n                            // System.out.println(\" Here1\");\n                            a.set(j, a.get(j)+cur_len-j);\n                        }\n                        else{\n                            // System.out.println(\"Here2\");\n                            a.add(cur_len-j);\n                        }\n                    }\n                }else{\n                    // System.out.println(\"Here3\");\n                    ArrayList<Integer> a = new ArrayList<>();\n                    for(int j=0;j<cur_len;j++){\n                        a.add(cur_len-j);\n                    }\n                    count.put(ch, a);\n                }\n                cur_len = 1;\n                ch = cur;\n            }else{\n                cur_len++;\n            }\n        }\n        \n        if(count.containsKey(ch)){\n            ArrayList<Integer> a = count.get(ch);\n            for(int j=0;j<cur_len;j++){\n                if(j<a.size())\n                    a.set(j, a.get(j)+cur_len-j);\n                else\n                    a.add(cur_len-j);\n            }\n        }else{\n            ArrayList<Integer> a = new ArrayList<>();\n            for(int j=0;j<cur_len;j++){\n                a.add(cur_len-j);\n            }\n            count.put(ch, a);\n        }\n        \n        \n        // for (Map.Entry<Character, ArrayList<Integer>> entry : count.entrySet()) {\n        //     Character key = entry.getKey();\n        //     ArrayList<Integer> value = entry.getValue();\n        //     System.out.println(key+\" \"+value);\n        // }\n        \n        // int res = -1;\n        int max_len = -1;\n        for (Map.Entry<Character, ArrayList<Integer>> entry : count.entrySet()) {\n            // String key = entry.getKey();\n            ArrayList<Integer> value = entry.getValue();\n            for(int i=0;i<value.size();i++){\n                if(value.get(i)>=3 && i+1>=max_len){\n                    max_len = i+1;\n                    // res=value.get(i);\n                }\n            }\n        }\n        return max_len;\n    }\n}","compare_resulttitle_slug":"find-longest-special-substring-that-occurs-thrice-i","has_notes":false,"flag_type":1}