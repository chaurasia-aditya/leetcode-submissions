{"id":1272772752,"question_id":1240,"lang":"java","lang_name":"Java","time":"3 weeks, 5 days","timestamp":1717107661,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1272772752/","is_pending":"Not Pending","title":"Stone Game II","memory":"45.2 MB","code":"class Solution {\n\n    // int recur(int pos, int n, int[] piles, int m, int curA, int curB, boolean isAlice){\n    //     if(pos >= n){\n    //         return isAlice ? curB : curA;\n    //     }\n            \n    //     int newCur = isAlice ? curA : curB;\n\n    //     int max = 0;\n    //     for(int i=pos; i<Math.min(n, pos+2*m);i++){\n    //         newCur+=piles[pos];\n    //         if(isAlice)\n    //             max = Math.max(max, recur(i+1, n, piles, Math.max(m, i-pos+1), newCur, curB, false));\n    //         else\n    //             max = Math.max(max, recur(i+1, n, piles, Math.max(m, i-pos+1), curA, newCur, true));\n    //     }\n\n    //     return max;\n    // }\n\n    private int recur(int pos, int m, int[] piles, boolean isAlice, int[][][] memo) {\n        int n = piles.length;\n        if (pos >= n) {\n            return 0;\n        }\n        \n        if (memo[pos][m][isAlice ? 0 : 1] != -1) {\n            return memo[pos][m][isAlice ? 0 : 1];\n        }\n        \n        int maxStones = isAlice ? 0 : Integer.MAX_VALUE;\n        int sum = 0;\n        \n        for (int x = 1; x <= 2 * m && pos + x - 1 < n; x++) {\n            sum += piles[pos + x - 1];\n            \n            if (isAlice) {\n                maxStones = Math.max(maxStones, sum + recur(pos + x, Math.max(m, x), piles, false, memo));\n            } else {\n                maxStones = Math.min(maxStones, recur(pos + x, Math.max(m, x), piles, true, memo));\n            }\n        }\n        \n        memo[pos][m][isAlice ? 0 : 1] = maxStones;\n        return maxStones;\n    }\n\n    public int stoneGameII(int[] piles) {\n        int n = piles.length;\n\n        int[][][] memo = new int[n][n+1][2];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= n; j++) {\n                memo[i][j][0] = memo[i][j][1] = -1;\n            }\n        }\n        \n        return recur(0, 1, piles, true, memo);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-ii","has_notes":false,"flag_type":1}