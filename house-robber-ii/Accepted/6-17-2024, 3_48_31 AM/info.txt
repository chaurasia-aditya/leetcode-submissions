{"id":1290958745,"question_id":213,"lang":"java","lang_name":"Java","time":"1Â week, 1Â day","timestamp":1718610511,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1290958745/","is_pending":"Not Pending","title":"House Robber II","memory":"41.2 MB","code":"class Solution {\n    public int rob(int[] nums) {\n        int n = nums.length;\n        if(n==1)\n            return nums[0];\n        else if(n == 2){\n            return Math.max(nums[0], nums[1]);\n        }\n\n        int[] dp0 = new int[n-1];\n        int[] dp1 = new int[n-1];\n\n        dp0[0] = nums[0];\n        dp0[1] = nums[1];\n        \n\n        dp1[0] = nums[1];\n        dp1[1] = nums[2];\n\n        if(n>3){\n            dp0[2] = nums[0]+nums[2];\n            dp1[2] = nums[1]+nums[3];\n        }\n\n        for(int i=3;i<n-1;i++){\n            dp0[i] = nums[i]+Math.max(dp0[i-2], dp0[i-3]);\n        }\n\n        for(int i=3;i<n-1;i++){\n            dp1[i] = nums[i+1]+Math.max(dp1[i-2], dp1[i-3]);\n        }\n\n        int m1 = Math.max(dp0[n-2], dp0[n-3]);\n        int m2 = Math.max(dp1[n-2], dp1[n-3]);\n\n        return Math.max(m1, m2);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-ii","has_notes":false,"flag_type":1}