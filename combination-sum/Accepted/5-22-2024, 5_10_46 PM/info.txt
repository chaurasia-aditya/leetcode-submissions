{"id":1265237725,"question_id":39,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1716412246,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1265237725/","is_pending":"Not Pending","title":"Combination Sum","memory":"44.5 MB","code":"class Solution {\n    public void backtrack(int i, int left, int n, int[] arr, List<Integer> cur, List<List<Integer>> res){        \n        if(left == 0){\n            res.add(new ArrayList<>(cur));\n            return;\n        }\n        \n        if(left<0 || i==n)\n            return;\n        \n        if(arr[i]<=left){\n            cur.add(arr[i]);\n            backtrack(i, left-arr[i], n, arr, cur, res);\n            cur.remove(cur.size()-1);\n        }\n        backtrack(i+1, left, n, arr, cur, res);\n    }\n    \n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        int n = candidates.length;\n        \n        List<List<Integer>> res = new ArrayList<>();\n        \n        \n        backtrack(0, target, n, candidates, new ArrayList<>(), res);\n        \n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}