{"id":1271992372,"question_id":39,"lang":"java","lang_name":"Java","time":"3 weeks, 5 days","timestamp":1717041886,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1271992372/","is_pending":"Not Pending","title":"Combination Sum","memory":"44.4 MB","code":"class Solution {\n    void generateCombinations(int i, int target, int n, int[] candidates, ArrayList<Integer> cur, List<List<Integer>> res){\n        if(target<0 || i==n)\n            return;\n        \n        if(target == 0){\n            res.add(new ArrayList(cur));\n            return;\n        }\n        \n        \n        cur.add(candidates[i]);\n        generateCombinations(i, target-candidates[i], n, candidates, cur, res);\n        cur.remove(cur.size()-1);\n                \n        generateCombinations(i+1, target, n, candidates, cur, res);\n        \n    }\n    \n    \n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n        int n = candidates.length;\n        \n        generateCombinations(0, target, n, candidates, new ArrayList<>(), res);\n        \n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}