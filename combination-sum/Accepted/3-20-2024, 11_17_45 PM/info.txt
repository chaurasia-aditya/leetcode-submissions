{"id":1209644850,"question_id":39,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1710991065,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1209644850/","is_pending":"Not Pending","title":"Combination Sum","memory":"44.8 MB","code":"class Solution {\n    public void dfs(int cur, int i, int[] candidates, List<Integer> l, List<List<Integer>> res){\n        if(cur<0 || i==candidates.length)\n            return;\n        if(cur == 0){\n            res.add(new ArrayList<>(l));\n            return;\n        }\n        for(int j = i;j<candidates.length;j++){\n            l.add(candidates[j]);\n\n            dfs(cur-candidates[j], j, candidates, l, res);\n\n            l.remove(l.size()-1);\n        }\n    }\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n\n        int n = candidates.length;\n\n        dfs(target, 0, candidates, new ArrayList<Integer>(), res);\n\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}