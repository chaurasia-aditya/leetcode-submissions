{"id":1204727435,"question_id":860,"lang":"c","lang_name":"C","time":"3 months, 1 week","timestamp":1710535028,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1204727435/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"12.6 MB","code":"\n\n\ntypedef struct {\n    int *queue;\n    int k;\n    int end, start;\n} MyCircularQueue;\n\nMyCircularQueue* myCircularQueueCreate(int k) {\n    MyCircularQueue *cq = (MyCircularQueue*)malloc(sizeof(MyCircularQueue));\n    cq->queue = (int*) malloc(k*sizeof(int));\n    cq->end = -1;\n    cq->start = -1;\n    cq->k = k;\n    return cq;\n}\n\nbool myCircularQueueIsEmpty(MyCircularQueue* obj) {\n    if(obj->start == -1)\n        return true;\n    return false;\n}\n\nbool myCircularQueueIsFull(MyCircularQueue* obj) {\n    if((obj->start == obj->end+1) || (obj->start == 0 && obj->end == obj->k-1))\n        return true;\n    return false;\n}\n\nbool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {\n    if(myCircularQueueIsFull(obj)){\n        return false;\n    }\n    if(obj->start == -1){\n        obj->start++;\n    }\n    obj->end = (obj->end+1)%obj->k;\n    obj->queue[obj->end] = value;\n    \n    return true;\n}\n\nbool myCircularQueueDeQueue(MyCircularQueue* obj) {\n    if(myCircularQueueIsEmpty(obj))\n        return false;\n    if(obj->start == obj->end){\n        obj->start = obj->end = -1;\n    }else{\n        obj->start = ((obj->start+1)%obj->k);\n    }\n    return true;\n}\n\nint myCircularQueueFront(MyCircularQueue* obj) {\n    if(myCircularQueueIsEmpty(obj))\n        return -1;\n    return obj->queue[obj->start];\n}\n\nint myCircularQueueRear(MyCircularQueue* obj) {\n    if(myCircularQueueIsEmpty(obj))\n        return -1;\n    return obj->queue[obj->end];\n}\n\nvoid myCircularQueueFree(MyCircularQueue* obj) {\n    free(obj->queue);\n    free(obj);\n}\n\n/**\n * Your MyCircularQueue struct will be instantiated and called as such:\n * MyCircularQueue* obj = myCircularQueueCreate(k);\n * bool param_1 = myCircularQueueEnQueue(obj, value);\n \n * bool param_2 = myCircularQueueDeQueue(obj);\n \n * int param_3 = myCircularQueueFront(obj);\n \n * int param_4 = myCircularQueueRear(obj);\n \n * bool param_5 = myCircularQueueIsEmpty(obj);\n \n * bool param_6 = myCircularQueueIsFull(obj);\n \n * myCircularQueueFree(obj);\n*/","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue","has_notes":false,"flag_type":1}