{"id":1228102805,"question_id":860,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1712708166,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1228102805/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"44.6 MB","code":"class MyCircularQueue {\n\n    int maxSize, curSize;\n    List<Integer> list;\n\n    public MyCircularQueue(int k) {\n        list = new LinkedList<>();\n        maxSize = k;\n        curSize = 0;\n    }\n    \n    public boolean enQueue(int value) {\n        if(curSize == maxSize)\n            return false;\n        list.add(value);\n        curSize++;\n        return true;\n    }\n    \n    public boolean deQueue() {\n        if(curSize == 0)\n            return false;\n        list.remove(0);\n        curSize--;\n        return true;\n    }\n    \n    public int Front() {\n        if(curSize == 0)\n            return -1;\n        return list.get(0);\n    }\n    \n    public int Rear() {\n        if(curSize == 0)\n            return -1;\n        return list.get(curSize-1);\n    }\n    \n    public boolean isEmpty() {\n        return curSize==0;\n    }\n    \n    public boolean isFull() {\n        return curSize==maxSize;\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * boolean param_1 = obj.enQueue(value);\n * boolean param_2 = obj.deQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * boolean param_5 = obj.isEmpty();\n * boolean param_6 = obj.isFull();\n */","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue","has_notes":false,"flag_type":1}