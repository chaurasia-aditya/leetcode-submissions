{"id":1259944304,"question_id":1120,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1715888364,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1259944304/","is_pending":"Not Pending","title":"Flower Planting With No Adjacent","memory":"50.9 MB","code":"class Solution {\n    \n    boolean isSafe(int node, int c, List<Integer> list, int[] colour){\n        for(int i:list){\n            if (colour[i]==c)\n                return false;\n        }\n        return true;\n    }\n    \n    boolean colouring(int node, int n, List<List<Integer>> grid, int[] colour){\n        if(node == n)\n            return true;\n        \n        for (int c = 1; c <= 4; c++) {\n            if (isSafe(node, c, grid.get(node), colour)) {\n                colour[node] = c;\n                if (colouring(node+1, n, grid, colour))\n                    return true;\n                colour[node] = 0;\n            }\n        }\n\n        return false;\n    }\n    public int[] gardenNoAdj(int n, int[][] paths) {\n        int[] colour = new int[n];\n        \n        List<List<Integer>> grid = new ArrayList<>();\n        for(int i=0;i<n;i++)\n            grid.add(new ArrayList<>());\n        for(int i=0;i<paths.length;i++){\n            grid.get(paths[i][0]-1).add(paths[i][1]-1);\n            grid.get(paths[i][1]-1).add(paths[i][0]-1);\n        }\n        \n        colouring(0, n, grid, colour);\n        \n        return colour;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"flower-planting-with-no-adjacent","has_notes":false,"flag_type":1}