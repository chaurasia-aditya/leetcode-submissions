{"id":1281116439,"question_id":1576,"lang":"java","lang_name":"Java","time":"2 weeks, 3 days","timestamp":1717820398,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1281116439/","is_pending":"Not Pending","title":"Reorder Routes to Make All Paths Lead to the City Zero","memory":"73.2 MB","code":"class Solution {\n\n    int dfs(int cur, int n, boolean[] visited, List<List<Integer>> graph){      \n        visited[cur] = true;\n        List<Integer> conn = graph.get(cur);\n\n        int count = 0;\n\n        for(int i:conn){\n            if(!visited[Math.abs(i)]){\n                count+=(dfs(Math.abs(i), n, visited, graph));\n                if(i>0)\n                    count++;\n            }\n             \n        }\n\n        return count;        \n    }\n\n    public int minReorder(int n, int[][] connections) {\n        List<List<Integer>> graph = new ArrayList<>();\n        for(int i=0;i<n;i++)\n            graph.add(new ArrayList<>());\n        for(int[] cur:connections){\n            graph.get(cur[0]).add(cur[1]);\n            graph.get(cur[1]).add(-cur[0]);\n        }\n\n        boolean[] visited = new boolean[n];\n\n        return dfs(0, n, visited, graph);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reorder-routes-to-make-all-paths-lead-to-the-city-zero","has_notes":false,"flag_type":1}