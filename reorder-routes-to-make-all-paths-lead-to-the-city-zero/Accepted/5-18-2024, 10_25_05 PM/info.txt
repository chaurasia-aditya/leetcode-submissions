{"id":1261729809,"question_id":1576,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1716085505,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1261729809/","is_pending":"Not Pending","title":"Reorder Routes to Make All Paths Lead to the City Zero","memory":"73.4 MB","code":"class Solution {\n    int count = 0;\n    \n    void dfs(int node, int n, List<List<Integer>> grid, boolean[] visited){\n        visited[node] = true;\n        for (int j : grid.get(node))\n            if (!visited[Math.abs(j)]){\n                dfs(Math.abs(j), n, grid, visited);\n                if(j>0)\n                    count++;\n            }\n    }\n    \n    public int minReorder(int n, int[][] connections) {\n        boolean[] visited = new boolean[n];\n        List<List<Integer>> grid = new ArrayList<>();\n        \n        for(int i = 0; i < n; i++) \n            grid.add(new ArrayList<>());\n        \n        for(int i=0;i<connections.length;i++){\n            grid.get(connections[i][0]).add(connections[i][1]);\n            grid.get(connections[i][1]).add(-connections[i][0]);\n        }\n        \n        dfs(0, n, grid, visited);\n        \n        return count;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reorder-routes-to-make-all-paths-lead-to-the-city-zero","has_notes":false,"flag_type":1}