{"id":1062828030,"question_id":208,"lang":"java","lang_name":"Java","time":"8 months, 4 weeks","timestamp":1696055814,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/1062828030/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"54 MB","code":"class Node{\n    public Node[] children;\n    boolean isEnd;\n    public Node(){\n        children = new Node[26];\n        isEnd = false;\n    }\n}\nclass Trie {\n    Node root;\n    public Trie() {\n        root = new Node();\n    }\n    \n    public void insert(String word) {\n        if(root == null)\n            return;\n        Node cur = root;\n        for(int i=0;i<word.length();i++){\n            int ch = word.charAt(i)-'a';\n            if(cur.children[ch] == null){\n                cur.children[ch] = new Node();\n            }\n            cur = cur.children[ch];\n        }\n        cur.isEnd = true;\n    }\n    \n    public boolean search(String word) {\n        Node cur = root;\n  \n        for (char c : word.toCharArray()) {\n            int index = c-'a';\n            if (cur.children[index] == null) {\n                return false;\n            }\n            cur = cur.children[index];\n        }\n        return cur.isEnd;\n    }\n    \n    public boolean startsWith(String prefix) {\n        Node cur = root;\n  \n        for (char c : prefix.toCharArray()) {\n            int index = c-'a';\n            if (cur.children[index] == null) {\n                return false;\n            }\n            cur = cur.children[index];\n        }\n        return true;\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}