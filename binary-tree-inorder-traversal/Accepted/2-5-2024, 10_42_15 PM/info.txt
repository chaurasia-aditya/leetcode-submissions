{"id":1167405663,"question_id":94,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1707190935,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1167405663/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"41.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void inorder(TreeNode cur, List<Integer> res){\n        if(cur == null)\n            return;\n\n        inorder(cur.left, res);\n        res.add(cur.val);\n        inorder(cur.right, res);\n    }\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<Integer>();\n        // inorder(root, res);\n        // return res;\n\n        Stack<TreeNode> st = new Stack();\n        TreeNode cur = root;\n\n        while(cur!=null || !st.isEmpty()){\n            while(cur != null){\n                st.push(cur);\n                cur = cur.left;\n            }\n            cur = st.pop();\n            res.add(cur.val);\n            cur = cur.right;\n        }\n\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}