{"id":1284647838,"question_id":1171,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1718091811,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1284647838/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"45.4 MB","code":"class Solution {\n    int[] dx = new int[]{0, 0, 1, -1, 1, 1, -1, -1};\n    int[] dy = new int[]{1, -1, 0, 0, 1, -1, -1, 1};\n\n    class Pair{\n        int i,j;\n\n        public Pair(int i, int j){\n            this.i = i;\n            this.j = j;\n        }\n    }\n    public int shortestPathBinaryMatrix(int[][] grid) {\n        int n = grid.length;\n        if(grid[0][0] == 1 || grid[n-1][n-1]==1)\n            return -1;\n        if(n==1)\n            return 1;\n\n        Queue<Pair> q = new LinkedList<>();\n        int count = 1;\n        int cur_i, cur_j, new_i, new_j;\n\n        q.offer(new Pair(0, 0));\n        while(!q.isEmpty()){\n            int size = q.size();\n            while(size-->0){\n                Pair cur = q.poll();\n                cur_i = cur.i;\n                cur_j = cur.j;\n\n                for(int i=0;i<8;i++){\n                    new_i = cur_i+dx[i];\n                    new_j = cur_j+dy[i];\n\n                    if(new_i>=0 && new_i<n && new_j>=0 && new_j<n && grid[new_i][new_j] == 0){\n                        if(new_i == n-1 && new_j==n-1)\n                            return count+1;\n                        q.add(new Pair(new_i, new_j));\n                        grid[new_i][new_j] = 2;\n                    }\n                }\n            }\n            count++;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false,"flag_type":1}