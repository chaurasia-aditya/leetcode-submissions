{"id":1069171567,"question_id":46,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1696664481,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1069171567/","is_pending":"Not Pending","title":"Permutations","memory":"43.3 MB","code":"class Solution {\n    boolean[] visited;\n    void getPermute(int count, ArrayList<Integer> cur, List<List<Integer>> res, int[] nums){        \n        if(count == nums.length){\n            res.add(new ArrayList<>(cur));\n            return;\n        }\n        \n        for(int i=0;i<nums.length;i++){\n            if(!visited[i]){\n                visited[i] = true;\n                cur.add(nums[i]);\n                getPermute(count+1, cur, res, nums);\n                cur.remove(cur.size()-1);\n                visited[i] = false;\n            }\n        }\n    }\n    public List<List<Integer>> permute(int[] nums) {\n        visited = new boolean[nums.length];\n        List<List<Integer>> res = new ArrayList<>();\n        getPermute(0, new ArrayList<Integer>(), res, nums);\n\n        return res;\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}