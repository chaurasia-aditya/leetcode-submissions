{"id":1269921958,"question_id":210,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1716858392,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1269921958/","is_pending":"Not Pending","title":"Course Schedule II","memory":"45.7 MB","code":"class Solution {\n    public boolean getTopoSort(int i, int n, boolean[] visited, boolean[] recStack, List<List<Integer>> graph, Stack<Integer> st){\n        if(recStack[i])\n            return true;\n        if(visited[i])\n            return false;\n        \n        recStack[i] = true;\n        visited[i] = true;\n        \n        List<Integer> cur = graph.get(i);\n\n        for(Integer c:cur){\n            if(getTopoSort(c, n, visited, recStack, graph, st))\n                return true;\n        }\n\n        recStack[i]= false;\n        st.push(i);\n\n        return false;\n    }\n\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        List<List<Integer>> graph = new ArrayList<>();\n\n        for(int i=0;i<numCourses;i++)\n            graph.add(new ArrayList<>());\n\n        for(int[] cur:prerequisites){\n            graph.get(cur[1]).add(cur[0]);\n        }\n\n        Stack<Integer> st = new Stack<>();\n        boolean[] visited = new boolean[numCourses];\n        boolean[] recStack = new boolean[numCourses];\n \n        for (int i = 0; i < numCourses; i++)\n            if (getTopoSort(i, numCourses, visited, recStack, graph, st))\n                return new int[]{};\n\n\n        int[] res = new int[st.size()];\n        int i = 0;\n        while (!st.empty()) {\n            res[i++] = st.pop();\n        }\n\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}