{"id":1269925665,"question_id":210,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1716858897,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1269925665/","is_pending":"Not Pending","title":"Course Schedule II","memory":"45.5 MB","code":"class Solution {\n    public boolean getTopoSort(int i, int n, boolean[] visited, boolean[] curPath, ArrayList<Integer>[] graph, Stack<Integer> st){    \n        curPath[i] = true;\n        visited[i] = true;\n        \n        List<Integer> cur = graph[i];\n\n        for(Integer c:cur){\n            if(curPath[c] == true)\n                return true;\n            if(!visited[c] && getTopoSort(c, n, visited, curPath, graph, st))\n                return true;\n        }\n\n        curPath[i]= false;\n        st.push(i);\n\n        return false;\n    }\n\n    public int[] findOrder(int n, int[][] prerequisites) {\n        ArrayList<Integer>[] graph = new ArrayList[n];\n\n        for(int i=0;i<n;i++)\n            graph[i] = new ArrayList<>();\n\n        for(int[] cur:prerequisites){\n            graph[cur[1]].add(cur[0]);\n        }\n\n        Stack<Integer> st = new Stack<>();\n        boolean[] visited = new boolean[n];\n        boolean[] curPath = new boolean[n];\n \n        for (int i = 0; i < n; i++)\n            if (!visited[i] && getTopoSort(i, n, visited, curPath, graph, st))\n                return new int[]{};\n\n\n        int[] res = new int[st.size()];\n        int i = 0;\n        while (!st.empty()) {\n            res[i++] = st.pop();\n        }\n\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}