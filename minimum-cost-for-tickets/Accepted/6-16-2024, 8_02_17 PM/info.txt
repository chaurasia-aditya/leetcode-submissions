{"id":1290581402,"question_id":1025,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1718582537,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1290581402/","is_pending":"Not Pending","title":"Minimum Cost For Tickets","memory":"41.1 MB","code":"class Solution {\n    public int backtrack(int index, int n, int[] days, int[] costs, int[] memo){\n        if(index >= n){\n            return 0;\n        }\n\n        if(memo[index]!=-1)\n            return memo[index];\n        \n        int cost1 = costs[0] + backtrack(index+1, n, days, costs, memo);\n\n        int i = index;\n\n        while(i < n && days[i] < days[index]+7)\n            i++;\n        int cost7 = costs[1] + backtrack(i, n, days, costs, memo);\n\n        i = index;\n        while(i < n && days[i] < days[index]+30)\n            i++;\n        int cost30 = costs[2] + backtrack(i, n, days, costs, memo);\n        \n        return memo[index] = Math.min(cost1, Math.min(cost7, cost30));  \n    }\n    public int mincostTickets(int[] days, int[] costs) {\n        int n = days.length;\n\n        int[] memo = new int[n+1];\n        Arrays.fill(memo, -1);\n\n        return backtrack(0, n, days, costs, memo);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-for-tickets","has_notes":false,"flag_type":1}