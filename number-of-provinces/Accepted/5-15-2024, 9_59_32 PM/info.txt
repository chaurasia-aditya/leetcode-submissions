{"id":1259195945,"question_id":547,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1715824772,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1259195945/","is_pending":"Not Pending","title":"Number of Provinces","memory":"47.1 MB","code":"class Solution {\n    \n    void dfs(int i, int[][] grid, boolean[] visited, int n){\n        if(i<0 || i==n){\n            return;\n        }\n        \n        visited[i] = true;\n                \n        for(int k = 0; k<n; k++){\n            if(!visited[k] && grid[i][k] == 1){\n                dfs(k, grid, visited, n);\n            }\n        }\n    }\n    \n    public int findCircleNum(int[][] isConnected) {\n        int res = 0;\n        int n = isConnected.length;\n        int j;\n        \n        boolean[] visited = new boolean[n];\n        \n        for(int i=0;i<n;i++){\n            if(!visited[i]){\n                res++;\n                dfs(i, isConnected, visited, n);\n            }\n        }\n        \n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}