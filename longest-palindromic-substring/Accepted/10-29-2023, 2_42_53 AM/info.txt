{"id":1086631331,"question_id":5,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1698561773,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1086631331/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"41.2 MB","code":"class Solution {\n    int l_idx, r_idx, max = 0;\n    public void check(String s, int l, int h){\n        while(l>=0 && h<s.length() && s.charAt(l) == s.charAt(h)){\n            l--;\n            h++;\n        }\n        if(h-l+1>max){\n            max = h-l+1;\n            l_idx = l+1;\n            r_idx = h;\n            // res = s.substring(l+1, high);\n        }\n    }\n    public String longestPalindrome(String s) {\n        int n = s.length();\n        int low, high;\n        // int max = 0;\n        String res = \"\";\n        for(int i=0;i<n;i++){\n            // low = i;\n            // high = i;\n            // while(low>=0 && high<n && s.charAt(low) == s.charAt(high)){\n            //     low--;\n            //     high++;\n            // }\n            // if(high-low+1>max){\n            //     max = high-low+1;\n            //     res = s.substring(low+1, high);\n            // }\n            // low = i;\n            // high = i+1;\n            // while(low>=0 && high<n && s.charAt(low) == s.charAt(high)){\n            //     low--;\n            //     high++;\n            // }\n            // if(high-low+1>max){\n            //     max = high-low+1;\n            //     res = s.substring(low+1, high);\n            // }\n            check(s, i, i);\n            check(s, i, i+1);\n        }\n        return s.substring(l_idx, r_idx);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1}