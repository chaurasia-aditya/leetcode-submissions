{"id":1016580783,"question_id":54,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1691585625,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1016580783/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"40.5 MB","code":"class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        List<Integer> ans = new ArrayList<>();\n\n        int r = matrix.length;\n        int c = matrix[0].length;\n\n        int[][] dir = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};\n        int d = 0;\n        int max_r = r-1, max_c = c-1, min_r = 0, min_c = 0;\n\n        int i=0,j=0;\n        while(true){\n            if(i>max_r || i<min_r || j>max_c ||j<min_c){\n                break;\n            }\n            ans.add(matrix[i][j]);\n            while((i+dir[d][0] <= max_r) && (i+dir[d][0] >= min_r) && \n            (j+dir[d][1]<=max_c) && ((j+dir[d][1]>=min_c))){\n                i+=dir[d][0];\n                j+=dir[d][1];\n                ans.add(matrix[i][j]);\n            }\n            switch(d){\n                case 0:{\n                    min_r++;\n                    break;\n                }\n                case 1:{\n                    max_c--;\n                    break;\n                }\n                case 2:{\n                    max_r--;\n                    break;\n                }\n                case 3:{\n                    min_c++;\n                    break;\n                }\n            }\n            d=(d+1)%4;\n            i+=dir[d][0];\n            j+=dir[d][1];\n        }\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111","title_slug":"spiral-matrix","has_notes":false,"flag_type":1}